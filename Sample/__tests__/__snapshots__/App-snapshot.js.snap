// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`snapshot 1`] = `
<RCTSafeAreaView
  emulateUnlessSupported={true}
  style={
    Object {
      "flex": 1,
    }
  }
>
  <View
    contentInsetAdjustmentBehavior="automatic"
    style={
      Object {
        "alignItems": "center",
        "backgroundColor": "#F3F3F3",
        "flex": 1,
        "justifyContent": "center",
      }
    }
  >
    <View
      accessibilityRole="button"
      accessibilityState={Object {}}
      accessible={true}
      focusable={true}
      onClick={[Function]}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderRelease={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
      style={
        Object {
          "opacity": 1,
        }
      }
    >
      <View
        style={
          Array [
            Object {},
          ]
        }
      >
        <Text
          style={
            Array [
              Object {
                "color": "#007AFF",
                "fontSize": 18,
                "margin": 8,
                "textAlign": "center",
              },
            ]
          }
        >
          Open
        </Text>
      </View>
    </View>
    <Text>
      Token: 
      &lt;none&gt;
    </Text>
    <Text>
      Size: 
      invisible
    </Text>
  </View>
  <Modal
    hardwareAccelerated={false}
    onRequestClose={[Function]}
    transparent={true}
    visible={false}
  >
    <View
      accessibilityRole="button"
      accessibilityState={Object {}}
      accessible={true}
      focusable={true}
      onClick={[Function]}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderRelease={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
      style={
        Object {
          "opacity": 1,
        }
      }
    >
      <View
        style={
          Array [
            Object {},
          ]
        }
      >
        <Text
          style={
            Array [
              Object {
                "color": "#007AFF",
                "fontSize": 18,
                "margin": 8,
                "textAlign": "center",
              },
            ]
          }
        >
          Close modal
        </Text>
      </View>
    </View>
    <View
      style={
        Array [
          Object {
            "flex": 1,
            "overflow": "hidden",
          },
          undefined,
        ]
      }
    >
      <RNCWebView
        allowsBackForwardNavigationGestures={false}
        bounces={false}
        cacheEnabled={true}
        injectedJavaScriptBeforeContentLoadedForMainFrameOnly={true}
        injectedJavaScriptForMainFrameOnly={true}
        javaScriptEnabled={true}
        messagingEnabled={true}
        onContentProcessDidTerminate={[Function]}
        onHttpError={[Function]}
        onLoadingError={[Function]}
        onLoadingFinish={[Function]}
        onLoadingProgress={[Function]}
        onLoadingStart={[Function]}
        onMessage={[Function]}
        onNavigationStateChange={[Function]}
        onShouldStartLoadWithRequest={[Function]}
        source={
          Object {
            "baseUrl": "http://127.0.0.1",
            "html": "
    <!DOCTYPE html>
    <html lang=\\"pt\\">
    
    <head>
        <meta charset=\\"UTF-8\\">
        <meta name=\\"viewport\\" content=\\"width=device-width, initial-scale=1.0\\">
        <title></title>

        <link rel=\\"preconnect\\" href=\\"https://www.google.com\\">
        <link rel=\\"preconnect\\" href=\\"https://www.gstatic.com\\" crossorigin>

        <script src=\\"https://www.google.com/recaptcha/enterprise.js?hl=pt\\" async defer></script>

        <script>
            const siteKey = '6LejsqwZAAAAAGsmSDWH5g09dOyNoGMcanBllKPF';
            const theme = 'dark';
            const size = 'invisible';
    
            let readyInterval;
            let onCloseInterval;
            let widget;
            let onCloseObserver;
    
            const onClose = () => {
                window.ReactNativeWebView.postMessage(JSON.stringify({
                    close: [],
                }));
            }
    
            const onLoad = () => {
                window.ReactNativeWebView.postMessage(JSON.stringify({
                    load: [],
                }));
            }
    
            const onExpire = () => {
                window.ReactNativeWebView.postMessage(JSON.stringify({
                    expire: [],
                }));
            }
    
            const onError = (error) => {
                window.ReactNativeWebView.postMessage(JSON.stringify({
                    error: [error],
                }));
            }
    
            const onVerify = (token) => {
                window.ReactNativeWebView.postMessage(JSON.stringify({
                    verify: [token],
                }));
            }
    
            const isReady = () => Boolean(typeof window === 'object' && window.grecaptcha && window.grecaptcha.enterprise.render);
    
            const registerOnCloseListener = () => {
                if (onCloseObserver) {
                    onCloseObserver.disconnect();
                }
    
                const iframes = document.getElementsByTagName('iframe');
    
                const recaptchaFrame = Array.prototype.find
                    .call(iframes, e => e.src.includes('google.com/recaptcha/api2/bframe'));
                const recaptchaElement = recaptchaFrame.parentNode.parentNode;
    
                clearInterval(onCloseInterval);
    
                let lastOpacity = recaptchaElement.style.opacity;
                onCloseObserver = new MutationObserver(mutations => {
                    if (lastOpacity !== recaptchaElement.style.opacity
                        && recaptchaElement.style.opacity == 0) {
                        onClose();
                    }
                    lastOpacity = recaptchaElement.style.opacity;
                });
                onCloseObserver.observe(recaptchaElement, {
                    attributes: true,
                    attributeFilter: ['style'],
                });
            }
    
            const isRendered = () => {
                return typeof widget === 'number';
            }
    
            const renderRecaptcha = () => {
                widget = window.grecaptcha.enterprise.render('recaptcha-container', {
                    sitekey: siteKey,
                    size,
                    theme,
                    callback: onVerify,
                    'expired-callback': onExpire,
                    'error-callback': onError,
                });
                if (onLoad) {
                    onLoad();
                }
                onCloseInterval = setInterval(registerOnCloseListener, 1000);
            }
    
            const updateReadyState = () => {
                if (isReady()) {
                    clearInterval(readyInterval);
                    renderRecaptcha()
                }
            }
    
            if (isReady()) {
                renderRecaptcha();
            } else {
                readyInterval = setInterval(updateReadyState, 1000);
            }
    
            window.rnRecaptcha = {
                execute: () => {
                    window.grecaptcha.enterprise.execute(widget);
                },
                reset: () => {
                    window.grecaptcha.enterprise.reset(widget);
                },
            }
        </script>
    
        <style>
            html,
            body,
            .container {
                height: 100%;
                width: 100%;
                margin: 0;
                padding: 0;
                background-color: transparent;
            }
    
            .container {
                display: flex;
                justify-content: center;
                align-items: center;
            }
        </style>
    </head>
    
    <body>
        <div class=\\"container\\">
            <span id=\\"recaptcha-container\\"></span>
        </div>
    </body>
    
    </html>",
          }
        }
        style={
          Array [
            Object {
              "flex": 1,
              "overflow": "hidden",
            },
            Object {
              "backgroundColor": "#ffffff",
            },
            Array [
              Object {
                "backgroundColor": "rgba(0, 0, 0, 0.5)",
                "flex": 1,
              },
              undefined,
            ],
          ]
        }
        useSharedProcessPool={true}
      />
    </View>
    <Text>
      Footer here
    </Text>
    <View
      style={
        Object {
          "alignItems": "center",
          "bottom": 0,
          "justifyContent": "center",
          "left": 0,
          "position": "absolute",
          "right": 0,
          "top": 0,
        }
      }
    >
      <ActivityIndicator
        animating={true}
        color="#999999"
        hidesWhenStopped={true}
        size="large"
      />
    </View>
  </Modal>
</RCTSafeAreaView>
`;
